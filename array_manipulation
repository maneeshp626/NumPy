import numpy as np


@@ np.copyto(dst, src, casting) : Copies values from one array to another, broadcasting as necessary.

Changing array shape :

@ np.reshape(a, newshape, order) : Gives a new shape to an array without changing its data.
a = np.arange(6).reshape((3, 2))
	  [[0, 1],
       [2, 3],
       [4, 5]]

 np.reshape(a, (2, 3))
 	  [[0, 1, 2],
       [3, 4, 5]]

np.reshape(a, (2, 3), order='F')
	  [[0, 4, 3],
       [2, 1, 5]]

a = np.array([[1,2,3], [4,5,6]])
np.reshape(a, 6)
[1, 2, 3, 4, 5, 6]

np.reshape(a, (3,-1))       # the unspecified value is inferred to be 2
	  [[1, 2],
       [3, 4],
       [5, 6]]


@ np.ravel(a, order) : Return a contiguous flattened array.
x = np.array([[1, 2, 3], [4, 5, 6]])
np.ravel(x)
[1, 2, 3, 4, 5, 6]

x.reshape(-1)
[1, 2, 3, 4, 5, 6]

@@ ndarray.flat : A 1-D iterator over the array.
x = np.arange(1, 7).reshape(2, 3)
	   [[1, 2, 3],
       [4, 5, 6]]


x.flat[3]   # 4
x.flat = 3
	  [[3, 3, 3],
       [3, 3, 3]]

x.flat[[1,4]] = 1
	  [[3, 1, 3],
       [3, 1, 3]]

@@ ndarray.flatten(order) : Return a copy of the array collapsed into one dimension.
a = np.array([[1,2], [3,4]])
[1, 2, 3, 4]

Transpose-like operations :
ndarray.T : The transposed array.
x = np.array([[1.,2.],[3.,4.]])
	  [[ 1.,  2.],
       [ 3.,  4.]]

x.T
	  [[ 1.,  3.],
       [ 2.,  4.]]

@@ np.transpose(a, exes): Permute the dimensions of an array. Transposing a 1-D array returns an unchanged view of the original array.
x = np.arange(4).reshape((2,2))
	  [[0, 1],
       [2, 3]]

np.transpose(x)
	  [[0, 2],
       [1, 3]]

x = np.ones((1, 2, 3))
np.transpose(x, (1, 0, 2)).shape
(2, 1, 3)



Joining arrays :

@@ np.concatenate(a1, a2, ..., axis=0) : Join a sequence of arrays along an existing axis.
a = np.array([[1, 2], [3, 4]])
b = np.array([[5, 6]])
np.concatenate((a, b), axis=0)
	  [[1, 2],
       [3, 4],
       [5, 6]]

np.concatenate((a, b.T), axis=1)
	  [[1, 2, 5],
       [3, 4, 6]]

np.concatenate((a, b), axis=None)
[1, 2, 3, 4, 5, 6]


@@ np.stack(a, axis=0) : Join a sequence of arrays along a new axis. For example, if axis=0 it will be the first dimension and if axis=-1 it will be the last dimension.

a = [np.random.randn(3, 4) for _ in range(10)]
np.stack(a, axis=0).shape
(10, 3, 4)


np.stack(a, axis=1).shape
(3, 10, 4)


np.stack(a, axis=2).shape
(3, 4, 10)


a = np.array([1, 2, 3])
b = np.array([2, 3, 4])
np.stack((a, b))
	  [[1, 2, 3],
       [2, 3, 4]]


np.stack((a, b), axis=-1)
	  [[1, 2],
       [2, 3],
       [3, 4]]

@@ np.column_stack(tup) : Stack 1-D arrays as columns into a 2-D array.
a = np.array((1,2,3))
b = np.array((2,3,4))
np.column_stack((a,b))
	  [[1, 2],
       [2, 3],
       [3, 4]]


@@ np.hstack(tup) : Stack arrays in sequence horizontally (column wise).
a = np.array((1,2,3))
b = np.array((2,3,4))
np.hstack((a,b))
[1, 2, 3, 2, 3, 4]

a = np.array([[1],[2],[3]])
b = np.array([[2],[3],[4]])
np.hstack((a,b))
	  [[1, 2],
       [2, 3],
       [3, 4]]

@@ np.vstack(tup) : Stack arrays in sequence vertically (row wise).
a = np.array([1, 2, 3])
b = np.array([2, 3, 4])
np.vstack((a,b))
	  [[1, 2, 3],
       [2, 3, 4]]


a = np.array([[1], [2], [3]])
b = np.array([[2], [3], [4]])
np.vstack((a,b))
	  [[1],
       [2],
       [3],
       [2],
       [3],
       [4]]


Splitting arrays :

@@ np.split(a, indices_or_sections, axis=0) : Split an array into multiple sub-arrays.
indices_or_sections : int or 1-D array

    If indices_or_sections is an integer, N, the array will be divided into N equal arrays along axis. If such a split is not possible, an error is raised.

    If indices_or_sections is a 1-D array of sorted integers, the entries indicate where along axis the array is split. For example, [2, 3] would, for axis=0, result in

            ary[:2]
            ary[2:3]
            ary[3:]

    If an index exceeds the dimension of the array along axis, an empty sub-array is returned correspondingly.

x = np.arange(9.0)
np.split(x, 3)
[0.,  1.,  2.], [3.,  4.,  5.], [6.,  7.,  8.]


x = np.arange(8.0)
np.split(x, [3, 5, 6, 10])
[0.,  1.,  2.],
[3.,  4.],
[5.],
[6.,  7.],
[]



@@ np.array_split(a, indices_or_sections, axis=0) : Split an array into multiple sub-arrays.
The only difference between split() and this function is that array_split allows indices_or_sections to be an integer that does not equally divide the axis. For an array of length l that should be split into n sections, it returns l % n sub-arrays of size l//n + 1 and the rest of size l//n.


x = np.arange(8.0)
np.array_split(x, 3)
[0.,  1.,  2.], [3.,  4.,  5.], [6.,  7.]


x = np.arange(7.0)
np.array_split(x, 3)
[0.,  1.,  2.], [3.,  4.], [5.,  6.]


@@ np.hsplit(a, indices_or_sections) : Split an array into multiple sub-arrays horizontally (column-wise).
x = np.arange(16.0).reshape(4, 4)
	  [[ 0.,   1.,   2.,   3.],
       [ 4.,   5.,   6.,   7.],
       [ 8.,   9.,  10.,  11.],
       [12.,  13.,  14.,  15.]]

np.hsplit(x, 2)
	  [[  0.,   1.],
       [  4.,   5.],
       [  8.,   9.],
       [12.,  13.]],

 	  [[  2.,   3.],
       [  6.,   7.],
       [10.,  11.],
       [14.,  15.]]

np.hsplit(x, np.array([3, 6]))
	  [[ 0.,   1.,   2.],
       [ 4.,   5.,   6.],
       [ 8.,   9.,  10.],
       [12.,  13.,  14.]],

	  [[ 3.],
       [ 7.],
       [11.],
       [15.]],

	  []

With a higher dimensional array the split is still along the second axis.

x = np.arange(8.0).reshape(2, 2, 2)
	  [[[0.,  1.],
        [2.,  3.]],
       [[4.,  5.],
        [6.,  7.]]]

np.hsplit(x, 2)
	  [[[0.,  1.]],
       [[4.,  5.]]],

	  [[[2.,  3.]],
       [[6.,  7.]]]

@@ np.vsplit(a, indices_or_sections) : Split an array into multiple sub-arrays vertically (row-wise).
x = np.arange(16.0).reshape(4, 4)
	  [[ 0.,   1.,   2.,   3.],
       [ 4.,   5.,   6.,   7.],
       [ 8.,   9.,  10.,  11.],
       [12.,  13.,  14.,  15.]]

np.vsplit(x, 2)
	  [[0., 1., 2., 3.],
       [4., 5., 6., 7.]], 

      [[ 8.,  9., 10., 11.],
       [12., 13., 14., 15.]]

np.vsplit(x, np.array([3, 6]))
	  [[ 0.,  1.,  2.,  3.],
       [ 4.,  5.,  6.,  7.],
       [ 8.,  9., 10., 11.]],

      [[12., 13., 14., 15.]], 
       []

With a higher dimensional array the split is still along the first axis.

x = np.arange(8.0).reshape(2, 2, 2)
	  [[[0.,  1.],
        [2.,  3.]],

       [[4.,  5.],
        [6.,  7.]]]

np.vsplit(x, 2)
	  [[[0., 1.],
        [2., 3.]]],

      [[[4., 5.],
        [6., 7.]]]



Tiling arrays :
@@ np.tile(a, reps) : Construct an array by repeating A the number of times given by reps.
If reps has length d, the result will have dimension of max(d, A.ndim).

a = np.array([0, 1, 2])
np.tile(a, 2)
[0, 1, 2, 0, 1, 2]

np.tile(a, (2, 2))
	  [[0, 1, 2, 0, 1, 2],
       [0, 1, 2, 0, 1, 2]]

np.tile(a, (2, 1, 2))
	  [[[0, 1, 2, 0, 1, 2]],
       [[0, 1, 2, 0, 1, 2]]]


b = np.array([[1, 2], [3, 4]])
np.tile(b, 2)
	  [[1, 2, 1, 2],
       [3, 4, 3, 4]]

np.tile(b, (2, 1))
	  [[1, 2],
       [3, 4],
       [1, 2],
       [3, 4]]

c = np.array([1,2,3,4])
np.tile(c,(4,1))
	  [[1, 2, 3, 4],
       [1, 2, 3, 4],
       [1, 2, 3, 4],
       [1, 2, 3, 4]]


@@ np.repeat(a, repeats, axis=None) : Repeat elements of an array.
np.repeat(3, 4)
[3, 3, 3, 3]

x = np.array([[1,2],[3,4]])
np.repeat(x, 2)
[1, 1, 2, 2, 3, 3, 4, 4]

np.repeat(x, 3, axis=1)
	  [[1, 1, 1, 2, 2, 2],
       [3, 3, 3, 4, 4, 4]]

np.repeat(x, [1, 2], axis=0)
	  [[1, 2],
       [3, 4],
       [3, 4]]


Adding and removing elements:

@@ np.delete(a, obj, axis) : This returns those entries not returned by arr[obj].
arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
	  [[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]]

np.delete(arr, 1, 0)
	  [[ 1,  2,  3,  4],
       [ 9, 10, 11, 12]]

np.delete(arr, [1,3,5], None)
[ 1,  3,  5,  7,  8,  9, 10, 11, 12]



@@ np.insert(a, obj, value, axis=None) : Insert values along the given axis before the given indices.
a = np.array([[1, 1], [2, 2], [3, 3]])
	  [[1, 1],
       [2, 2],
       [3, 3]]

np.insert(a, 1, 5)
[1, 5, 1, ..., 2, 3, 3]

np.insert(a, 1, 5, axis=1)
	  [[1, 5, 1],
       [2, 5, 2],
       [3, 5, 3]]


np.insert(a, [1], [[1],[2],[3]], axis=1)
	  [[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3]]

@@ np.append(a, values, axis=None) : Append values to the end of an array.

np.append([1, 2, 3], [[4, 5, 6], [7, 8, 9]])
[1, 2, 3, ..., 7, 8, 9]

np.append([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], axis=0)
	  [[1, 2, 3],
       [4, 5, 6],
       [7, 8, 9]]

@@ np.resize(a, new_shape) : Return a new array with the specified shape.
a=np.array([[0,1],[2,3]])
np.resize(a,(2,3))
	  [[0, 1, 2],
       [3, 0, 1]]

np.resize(a,(1,4))
[[0, 1, 2, 3]]

np.resize(a,(2,4))
	  [[0, 1, 2, 3],
       [0, 1, 2, 3]]


@@ np.unique(ar, return_index=False, return_inverse=False, return_counts=False, axis=None)
Find the unique elements of an array.

np.unique([1, 1, 2, 2, 3, 3])
[1, 2, 3]

a = np.array([[1, 1], [2, 3]])
np.unique(a)
[1, 2, 3]

a = np.array([[1, 0, 0], [1, 0, 0], [2, 3, 4]])
np.unique(a, axis=0)
[[1, 0, 0], [2, 3, 4]]

a = np.array(['a', 'b', 'b', 'c', 'a'])
u, indices = np.unique(a, return_index=True)
u = ['a', 'b', 'c']
indices = [0, 1, 3]


a = np.array([1, 2, 6, 4, 2, 3, 2])
u, indices = np.unique(a, return_inverse=True)
u = [1, 2, 3, 4, 6]
indices = [0, 1, 4, ..., 1, 2, 1]

@@ np.reshape(a, new shape, order) : Gives a new shape to an array without changing its data.
a = np.arange(6).reshape((3, 2))
	  [[0, 1],
       [2, 3],
       [4, 5]]

np.reshape(a, (2, 3))
	  [[0, 1, 2],
       [3, 4, 5]]

a = np.array([[1,2,3], [4,5,6]])
np.reshape(a, 6)
[1, 2, 3, 4, 5, 6]


np.reshape(a, (3,-1))       # the unspecified value is inferred to be 2
	  [[1, 2],
       [3, 4],
       [5, 6]]

